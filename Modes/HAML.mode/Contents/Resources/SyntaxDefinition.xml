<?xml version="1.0" encoding="UTF-8"?>
<syntax>
    <head>
        <name>HAML</name>

        <autocompleteoptions use-spelling-dictionary="no" />

        <charsintokens>
            <![CDATA[_0987654321abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ@#%.-]]>
        </charsintokens>
    </head>

    <states>
        <default id="Base" scope="meta.default">
            <state id="HAML Comments" useforautocomplete="yes" type="comment" foldable="yes" scope="comment.block">
                <begin><regex>^(?'commentspaces'[\ ]*)(?:-#|/)(?=.*$)</regex></begin>
                <end><regex>[\r\n](?!(?#see-insert-start-group:commentspaces)[\ ]|[\ ]*$)</regex></end>
            </state>

            <state id="HTML Element" useforautocomplete="no" scope="markup.tag">
              <begin><regex>^\s*[%\.#](?=[\w_-])</regex></begin>
              <end><regex>.(?=[&amp;={\[\s\r\n!])</regex></end>
            </state>

            <!--<state id="interpolated ruby" usespellchecking="yes" scope="style.value.keyword">
                <begin><regex>(?&lt;===)(?:.)</regex></begin>
                <end><regex>[\r\n]</regex></end>
                <import mode="Ruby" state="String with double quotes"/>
            </state>-->

            <state id="Inline Ruby" usesymbolsfrommode="Ruby" useautocompletefrommode="Ruby" scope="meta.default">
                <begin><regex>(?:[&amp;!]?(?&lt;!=)=|-(?!#))(?=[\s\w@])</regex></begin>
                <end><regex>[\n\r]</regex></end>

                <import mode="Ruby" keywords-only="yes" />
                <!--<state-link mode="Ruby" state="String with double quotes" />
				<state-link mode="Ruby" state="String with single quotes" />-->
                <state-link mode="Ruby" state="Regexp" />

                <state id="String with double quotes" type="string" scope="string.double">
                    <begin><regex>"</regex></begin>
                    <end><regex>(((?&lt;!\\)(\\\\)*)|^)"</regex></end>
                    
                    <state id="Ruby Interpolation" scope="language.variable.interpolation">
                        <begin><regex>\#{</regex></begin>
                        <end><regex>}</regex></end>
                        
                        <import mode="Ruby" keywords-only="yes" />
                        <state-link state="String with double quotes" />
                        <state-link state="String with single quotes" />
                    </state>
                </state>
                
                <state id="String with single quotes" type="string" scope="string.single">
                    <begin><regex>(?&lt;!\$)(?:')</regex></begin>
                    <end><regex>(((?&lt;!\\)(\\\\)*)|^)'</regex></end>
                </state>
            </state>
            
            <state id="CSS Code Block" usesymbolsfrommode="HAML" useautocompletefrommode="CSS" foldable="yes" scope="meta.block.css">
                <begin><regex>^(?'numbercssspaces'[\ ]*)[\:]css(?=.*$)</regex></begin>
                <end><regex>[\n\r](?!(?#see-insert-start-group:numbercssspaces)[\ ]|[\ ]*$)</regex></end>
                
                <!--<keywords id="CSS Style Symbol" scope="string.symbol">
                    <regex>(\:css)</regex>
                </keywords>-->
                
                <state-link state="Ruby Interpolation" />

                <import mode="CSS" state="Inside curly brackets" keywords-only="yes"/>
                <import mode="CSS" state="Attribute state" keywords-only="yes"/>
            </state>
            
            <state id="Javascript Code Block" usesymbolsfrommode="HAML" useautocompletefrommode="JavaScript" foldable="yes" scope="meta.block.js">
                <begin><regex>^(?'numberjavascriptspaces'[\ ]*)[\:]javascript(?=.*$)</regex></begin>
                <end><regex>[\n\r](?!(?#see-insert-start-group:numberjavascriptspaces)[\ ]|[\ ]*$)</regex></end>
                
                <import mode="JavaScript" keywords-only="yes"/>
                <state-link state="Ruby Interpolation" />
                
                <state id="Javascript String" type="string" scope="string.double.js">
                    <begin><regex>"</regex></begin>
                    <end><regex>(?&lt;!\\)(\\\\)*"</regex></end>
                    
                    <state-link state="Ruby Interpolation" />
                </state>
                
                <state id="Javascript SingleString" type="string" scope="string.single.js">
                    <begin><regex>'</regex></begin>
                    <end><regex>(?&lt;!\\)(\\\\)*'</regex></end>
                    
                    <state-link state="Ruby Interpolation" />
                </state>
                
                <state id="Javascript Block" type="block" foldable="yes" indent="yes" scope="meta.block.curly.js">
                    <begin><regex>(?&lt;!\#){</regex><autoend>}</autoend></begin>
                    <end><regex>}</regex></end>
                    
                    <import mode="JavaScript" keywords-only="yes"/>
                    <import state="Javascript Code Block" />
                </state>
            </state>
            
            <state id="Ruby Hash Attribute" usesymbolsfrommode="Ruby" useautocompletefrommode="Ruby" scope="meta.default">
                <begin><regex>{</regex></begin>
                <end><regex>[}\n\r]</regex></end>
                
                <state id="CSS Attributes" usesymbolsfrommode="CSS" useautocompletefrommode="CSS" scope="meta.block.css">
                    <begin><regex>\:style[ ]*\=\>[ ]*[\"]</regex></begin>
                    <end><regex>[\"]</regex></end>
                    <keywords id="CSS Style Symbol" scope="string.symbol">
                        <regex>(\:style)</regex>
                    </keywords>
                    
                    <!--<keywords id="CSS Surrounding Quotes" scope="string">
                        <regex>(")</regex>
                    </keywords>-->

                    <import mode="CSS" state="Inside curly brackets" keywords-only="yes"/>
                    <import mode="CSS" state="Attribute state" keywords-only="yes"/>
                </state>
                <import mode="Ruby" keywords-only="yes" />
                <state-link mode="Ruby" state="String with double quotes" />
				<state-link mode="Ruby" state="String with single quotes" />
                <state-link mode="Ruby" state="Regexp" />
            </state>
        </default>
    </states>
</syntax>
